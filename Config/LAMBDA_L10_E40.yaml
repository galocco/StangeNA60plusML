NBODY: 2
FILE_PREFIX: 'LAMBDA_L10_E40_analysis'

PDG: 3122
EINT: 40
MULTIPLICITY: 36.9
BRATIO: 0.489
T: 0.249
SIGMA: 0.002
MASS_WINDOW: 0.01

PT_BINS: [0, 3.]

BKG_MODELS: ['expo', 'pol1', 'pol2']

BDT_EFFICIENCY: [0.90, 1.00, 0.001] ##min, max ,step

MC_PATH: ../Data/LAMBDA_L10_E40/fntSig_Lambda_L10_E40_train.root
BKG_PATH: ../Data/LAMBDA_L10_E40/fntBkg_Lambda_L10_E40_train.root
DATA_PATH: ['../Data/LAMBDA_L10_E40/fntBkg_Lambda_L10_E40.root']
EVENT_PATH: ['../Data/LAMBDA_L10_E40/Bkg-histos_Lambda_L10_E40.root']

PRESELECTION: pt < 3

LARGE_DATA: True
GAUSS: False

XGBOOST_PARAMS:
  # general parameters
  silent: 1 # print message (useful to understand whats happening)
  n_jobs: 8 # number of available threads
  # learning task parameters
  objective: binary:logistic
  random_state: 42
  eval_metric: auc
  tree_method: hist

HYPERPARAMS:
  max_depth: 7
  learning_rate: 0.167
  n_estimators: 83
  gamma: 0.525
  min_child_weight: 9.82
  subsample: 0.89
  colsample_bytree: 0.64
  seed : 42

HYPERPARAMS_RANGE: #TODO: check if it works without tuples
  # booster parameters
  max_depth: !!python/tuple [5, 20] # defines the maximum depth of a single tree (regularization)
  learning_rate: !!python/tuple [0.01, 0.3] # learning rate
  n_estimators: !!python/tuple [50, 500] # number of boosting trees
  gamma: !!python/tuple [0.3, 1.1] # specifies the minimum loss reduction required to make a split
  min_child_weight: !!python/tuple [1, 12]
  subsample: !!python/tuple [0.5, 0.9] # denotes the fraction of observations to be randomly samples for each tree
  colsample_bytree: !!python/tuple [0.5, 0.9] # denotes the fraction of columns to be randomly samples for each tree
  # # lambda: (0,10]  # L2 regularization term on weights
  # # alpha: (0,10]  # L1 regularization term on weight

TRAINING_COLUMNS: 
  - cosp
  - dist
  - dca
  - d0prod
  - rapidity
